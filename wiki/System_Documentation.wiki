#summary KVMADM Users and System Administrators Guide.

= Purpose =

The *kvmadm* project is aimed to provide a minimalistic set of tools to facilitate and control multi-user usage of [http://kvm.qumranet.com Kernel Virtual Machine]. The KVM uses QEMU code as frontend. Certain actions needed to start a KVM virtual machine require root privileges. This package provides a secure setuid wrapper which performs necessary actions in controlled manner, and then drops privileges to the user level. Instances of KVM themselves runs under privileges of users rather than those of root.

= Hardware Requirements =

Requirements to the CPU type are the same as specified for KVM itself. The host computer must have a virtualization-capable CPU (Intel or AMD).

= Software Requirements =

== KVM Version ==

The current version of the *kvmadm* package is labeled as 0-17 as it has been tested with the KVM release labeled 17. However any other version of KVM compatible in QEMU command line options may be used.

== Other Utilities ==

Two external utilities *kvmadm* uses are `ifconfig` and `brctl`. KVM requires the same utilities to be installed on the host computer. 

= Installation =

== System-Wide Settings ==

In order to run KVM under user privileges, users must have write permissions on the `/dev/kvm` device. To provide this, it is recommended to do the following:

  * Create a group named for example `vm`. All users who are allowed to start instances of KVM must be members of this group.
  * Create udev rules as to make `/dev/kvm` writable by the members of the `vm` group by inserting the following lines in one of udev rule files:

{{{
# automatically assign root.vm ownership to /dev/kvm

KERNEL=="kvm",           MODE="0660", GROUP="vm"
}}}

The VM toplevel directory must be created as `/usr/share/KVM`. It should be owned by root.root and allow only read access for non-root users.

Bridge(s) for connecting virtual machines to each other, and to the outside networks, must be created and configured.

== Compilation from Sources ==

*Kvmadm* _should_ be compiled from sources. No pre-built binary distribution is provided.

1. Unpack the distribution tarball. Change to the toplevel distribution directory (`kvmadm- 0-17`).

2. Make sure that the following executables are on the default PATH prior to compilation:
    * ifconfig
    * brctl
    * qemu-system-x86_64
If some of these executables are not on the default PATH, modify PATH like shown below:
{{{
PATH=custom:path:extensions:$PATH ./configure
}}}
Otherwise just run `./configure`.

3. In the distribution toplevel directory, run `make`

4. Installation of the binaries and scripts _should_ be performed under the root privileges:

{{{
su -c "make install"
}}}

The following files will be installed (in `/usr/sbin` by default):

  * `kvmrun` - the secure wrapper (binary), installed with setuid bit on
  * `kvmparms` - a helper script to process the contents of a VM subdirectory; not to be ran on its own
  * `kvmid` - a helper script to generate a VM identifier based on bridge name and KVM system options

Absolute paths to `ifconfig`, `brctl`, and `qemu-system-x86_64` executables will be captured during the configure phase and hardcoded into the `kvmrun` binary executable.

= Virtual Machines Infrastructure =

*Kvmadm* does not have configuration files. The whole virtual machines infrastructure is defined by appropriate file system entries (i. e. files, symbolic links, and directories).

Each virtual machine is represented by a subdirectory in the VM toplevel directory. Name of a VM subdirectory contains the following:

  * name of the bridge interface where VM's NIC will be connected to via a tap device;
  * MAC address to assign to the VM's NIC;
  * QEMU system options encoded in base64 to avoid special characters in the subdirector y name.

An example of such VM subdirectory name is below:

{{{
br0.FE:43:56:4A:6F:51.Ii1tIiAiMTk2IiAiLW5vLXJ0YyIgIi1sb2NhbHRpbWUiIA==
}}}

(generated by `kvmid` for QEMU system options `-m 196 -no-rtc -localtime`

However users do not need to remember or type such long directory names. From the users standpoint, virtual machines are identified by short names that belong to symbolic links to VM subdirectories.

{{{
lrwxrwxrwx 1 root root     71 2007-07-09 21:17 ArchDuke -> br0.FE:B9:29:12:42:19.Ii1tIiAiMTk2IiAiLW5vLXJ0YyIgIi1sb2NhbHRpbWUiIA==/
drwx------ 2 dima users  4096 2007-07-09 23:45 br0.FE:B9:29:12:42:19.Ii1tIiAiMTk2IiAiLW5vLXJ0YyIgIi1sb2NhbHRpbWUiIA==
}}}

The example above shows a virtual machine named `ArchDuke` whose NIC will be connected to the bridge named `br0`, will be assigned MAC address `FE:B9:29:12:42:19`, and QEMU will be passed options `-m 196 -no-rtc -localtime` in addition to user-defined options.

Name of virtual machine will be used to name the tap device used to connect the VM to the bridge. The tap device will be named `tap-ArchDuke` for the example given. Therefore, length of VM name is limited: it should not exceed the value of `IFNAMSIZ - 5` where `IFNAMSIZ` is defined in the file `/usr/include/linux/if.h` as 16 (so, VM name should not be longer than 11 characters).

Such naming of tap devices also prevents users from uncontrolled running multiple instances of virtual machines: more than one tap device with same name cannot be created.

Each VM subdirectory contains files and symbolic links that define options controlled by users to be passed to QEMU to launch a virtual machine.

= Options that Users Control =

For security reasons, users are restricted in QEMU options that they can pass to launch virtual machines. These options are given below along with entries in VM subdirectory that control them.

== Block Devices ==

  * fda - floppy disk image. Appearance of this file adds the `-fda fda` option to QEMU command line

  * hda - hard disk image. Appearance of this file adds the `-hda hda` option  to QEMU command line

  * hdb - hard disk image. Appearance of this file adds the `-hdb hdb` option  to QEMU command line

  * cdrom - CD ROM image. Appearance of this file adds the `-cdrom cdrom` option  to QEMU command line

== Externally Loaded Linux Kernel ==

  * kernel - Linux kernel to load. Appearance of this file adds the `-kernel kernel` option to QEMU command line if boot mode is set to external Linux kernel (see below)

  * append - file containing Linux kernel command line. Appearance of this file adds the `-append "xxxx"` option to QEMU command line where "xxxx" is contents of the `append` file if boot mode is set to external Linux kernel (see below)

  * initrd - image of Linux kernel initialization RAM disk. Appearance of this file adds the `- inirtdr initrd` option to QEMU command line if boot mode is set to external Linux kernel (see below)

== Boot Mode ==

  * boot - symbolic link that points to one of `fda`, `hda`, `cdrom`, `kernel`. It controls the `-boot` QEMU command line option which will be `a`, `c`, `d` in the first three cases, and in the fourth case `-boot`  will not be used, but `-kernel` will be used instead, as described above. If boot contains anything else, `-boot n` will be provided (network boot)

== Interface Control ==

  * nographic - file whose contents does not matter (may be of zero length). Its appearance adds the `-nographic` option to QEMU command line suppressing the console window

  * serial - file containing the character device name to redirect the emulated serial device (`/dev/ttyS0` for Linux). If the file contains `stdio`, serial device will be redirected to the terminal from which the VM is launched

== Other Options ==

  * no-acpi, no-reboot - files whose contents starts with either 'y' or 'n' (may be upper or lower case). Appearance of these files  adds `-no-acpi` and `-no-reboot` QEMU command line options with values depending on the first characters of those files

  * rom - file containing a ROM image. Its appearance adds the `-option-rom rom` option to QEMU command line

The following VM subdirectory entries may be either files or symbolic links: fda, hda, hdb, cdrom, kernel, initrd, rom. The following entries should be files: no-acpi, no-reboot, append, serial, nographic. the following entry should be a symbolic  link: boot.

= Usage Scenarios =

== Administrative Tasks (Performed under Root Privileges) ==

=== Creation of a New Virtual Machine ===

  * Change to the VM toplevel directory:

{{{
cd /usr/share/KVM
}}}

  * Identify name of the bridge interface the VM will be used with (e. g. br0). Define memory amount to allocate to the virtual machine. Define other options (e. g. -no-rtc, -localtime to use host computer's clock). Create a VM subdirectory (dot as the second argument to `kvmid` causes random MAC address for VM's NIC to be generated, otherwise specify the desired MAC address):

{{{
mkdir `/usr/sbin/kvmid br0 . -m 196 -no-rtc -localtime`
}}}

  * Assign proper ownership and permissions to the VM subdirectory (the first line of `ls` output sorted by creation time descending, in one column, is the name of VM subdirectory just created):

{{{
chown joe.users `ls -1tc | head -n 1`
chmod 0700 `ls -1tc | head -n 1`
}}}

  * Create a symbolic link for the VM subdirectory which contains the user-visible name of the virtual machine:

{{{
ln -sf `ls -1tc | head -n 1` NewVM
}}}

== User Tasks ==

= Sample Configuration =





